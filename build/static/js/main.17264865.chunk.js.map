{"version":3,"sources":["components/ErrorModal/ErrorModal.js","images/Syntheticdataimage2.png","images/ai.png","data.js","MySelect.js","components/EditableRow.js","images/zensarlogo.png","components/navbar/Navbar.js","components/modal/Modal.js","components/modal1/Modal1.js","components/modal2/Modal2.js","components/modal5/Modal5.js","components/modal4/Modal4.js","components/modal6/Modal6.js","components/modal7/Modal7.js","components/modal8/Modal8.js","components/modal9/ReadOnlyRow1.js","components/modal9/EditableRow1.js","components/modal9/Modal9.js","components/modal10/Modal10.js","components/charts/Barchart.js","App.js","index.js"],"names":["ErrorModal","_ref","message","onClose","_jsxs","Modal","show","onHide","backdrop","keyboard","centered","children","_jsx","Header","closeButton","Title","Body","Footer","Button","variant","onClick","MySelect","props","allowSelectAll","ReactSelect","options","allOption","onChange","selected","defaultProps","label","value","EditableRow","Navbar","useEffect","AOS","init","_Fragment","className","href","src","zensarlogo","style","width","marginTop","marginBottom","marginLeft","setOpenModal","Modal1","setOpenModal1","btnClass1","setBtnClass1","file1","setFile1","useState","isLoading","setIsLoading","aria-labelledby","id","Spinner","animation","role","async","url","URL","createObjectURL","link","document","createElement","setAttribute","name","body","appendChild","click","removeChild","revokeObjectURL","error","console","alert","Modal2","log","contacts","success","condition","selectedfield","selectedrelation","num","selectedfield1","userinfo","setUserInfo","setOpenModal2","rows","concat","blob","setOpenModal4","event","preventDefault","metaData","columns","address","pii","sdtype","Object","keys","map","columnName","forEach","undefined","response","fetch","process","method","headers","JSON","stringify","no_of_samples","status","Error","downloadData","setTimeout","saveAs","setCondition","progressInterval","Modal5","setOpenModal5","setModalOpen1","progress","setProgress","setInterval","prev","clearInterval","ProgressBar","now","close","Modal4","setModalOpen5","message2","backgroundColor","height","fontSize","Modal6","setOpenModal6","handleSelect6","handleSelect7","handleSelect8","handleChange6","setNum","selected6","setSelected6","companies","jobs","company","filter","position","left","top","target","i","type","decNum","class","incNum","job","Modal7","setOpenModal7","setModalOpen8","lowerLimit","setlowerLimit","samples","setSamples","selected72","setSelected72","dummy1","res","USER_DATA71","parseFloat","parseInt","downloadData71","bottom","contact","data_type","field","required","placeholder","Modal8","setOpenModal8","ReadOnlyRow1","contact1","handleEditClick1","handleDeleteClick1","field1","relation1","number1","field2","EditableRow1","editFormData1","setEditFormData1","handleEditFormChange1","handleCancelClick1","handleEditFormSubmit1","editContactId1","setEditContactId1","selectedfield61","setSelectedField61","selectedfield62","setSelectedField62","selectedrelation11","setSelectedRelation11","num1","setNum1","border","textAlign","padding","fieldValue1","newFormData1","display","justifyContent","decNum1","fieldName1","incNum1","Modal9","setOpenModal9","addFormData1","setAddFormData1","contactss","setContactss","handleAddFormSubmit1","btnclass","setBtnClass","setModalOpen10","isShown","setIsShown","formValues","contactId","newContacts","index","findIndex","splice","size","color","onSubmit","gap","editedContact","borderCollapse","Fragment","compaines","close1","Modal10","setOpenModal10","zIndex","Barchart","setOpenModal3","BarChart","data","margin","right","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Label","textAnchor","fill","angle","Tooltip","Legend","Bar","require","config","App","file","setFile","isUploading","setIsUploading","loading","setLoading","setBtnColor","btnClass","setBtnColor1","setShow","setContacts","metadata","setMetadata","setResponse","contacts1","setContacts1","setMessage","message1","setMessage1","disable","setDisable","disable1","setDisable1","btnColor","btnColor1","modalOpen","setModalOpen","modalOpen1","modalOpen2","setModalOpen2","modalOpen3","setModalOpen3","modalOpen4","setModalOpen4","modalOpen5","modalOpen6","setModalOpen6","modalOpen7","setModalOpen7","modalOpen8","modalOpen9","setModalOpen9","modalOpen10","setSelected","setRows","selected1","setSelected1","selected2","setSelected2","setMessage2","setselectedField","setselectedRelation","setselectedField1","errorModalVisible","setErrorModalVisible","addFormData","setAddFormData","feild","lower_limit","upper_limit","editFormData","setEditFormData","primary_key","categories","feild2","newValue2","newValue3","newValue4","handleChange1","editContactId","setEditContactId","newValue5","newContact1","nanoid","newContacts1","background","synDataGenerator","alt","Form","Group","controlId","Control","selectedFile","files","endsWith","formData","FormData","append","jsonResponse","json","fetchData","Container","handleEditFormSubmit","Table","striped","bordered","hover","key","colSpan","as","Row","column","xs","Col","USER_DATA","downloadData1","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.17264865.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"./ErrorModal.css\";\r\n\r\nconst ErrorModal = ({ message, onClose }) => {\r\n  return (\r\n    <Modal\r\n      show={true}\r\n      onHide={onClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Fail</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{message}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"danger\" onClick={onClose}>\r\n          OK\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ErrorModal;\r\n","export default __webpack_public_path__ + \"static/media/Syntheticdataimage2.12133cd7.png\";","export default __webpack_public_path__ + \"static/media/ai.c5e43b3f.png\";","export const colourOptions = [\r\n  { value: \"B\",label: \"B\", color: \"#00B8D9\"},\r\n  { value: \"P\",label: \"P\", color: \"#0052CC\"}\r\n    // { label: \"Ocean\"},\r\n    // { label: \"Blue\"},\r\n    // { label: \"Purple\"},\r\n    // { label: \"Red\"},\r\n    // { label: \"Orange\"},\r\n    // {  label: \"Yellow\"},\r\n    // { label: \"Green\"},\r\n    // { label: \"Forest\"},\r\n    // { label: \"Slate\"},\r\n    // { label: \"Silver\"}\r\n  ];\r\n  // export const colourOptions = [\r\n  //   \"red\",\"green\",\"blue\"\r\n  // ]","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { default as ReactSelect } from \"react-select\";\r\nimport { colourOptions } from \"./data\";\r\n\r\nconst MySelect = props => {\r\n  if (props.allowSelectAll) {\r\n    return (\r\n      <ReactSelect\r\n        {...props}\r\n        //defaultValue={colourOptions}\r\n        options={[props.allOption, ...props.options]}\r\n        onChange={selected => {\r\n          // if (\r\n          //   //selected !== null &&\r\n          //   // selected.length > 0 &&\r\n          //   selected[selected.length - 1].value === props.allOption.value\r\n          // ) {\r\n          //   //return props.onChange(...props);\r\n          // }\r\n          //return props.onChange(...props);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <ReactSelect {...props} />;\r\n};\r\n\r\nMySelect.propTypes = {\r\n  options: PropTypes.array,\r\n  value: PropTypes.any,\r\n  onChange: PropTypes.func,\r\n  allowSelectAll:true,\r\n  allOption: PropTypes.shape({\r\n    label: PropTypes.string,\r\n    value: PropTypes.string\r\n  })\r\n};\r\n\r\nMySelect.defaultProps = {\r\n\r\n  allOption: {\r\n    label: \"Select all\",\r\n    value: \"*\"\r\n  }\r\n};\r\n\r\nexport default MySelect;\r\n","import { React, useState, Component } from \"react\";\r\nimport MySelect from \"../MySelect.js\";\r\nimport makeAnimated from \"react-select/animated\";\r\nimport { components } from \"react-select\";\r\n\r\nconst EditableRow = ({\r\n    contact,\r\n    handleClick,\r\n    editFormData,\r\n    handleEditFormChange,\r\n    handleCancelClick,\r\n    handleEditFormSubmit\r\n}) => {\r\n    let newCategoriesOption;\r\n    if (Array.isArray(contact.categories)) {\r\n        newCategoriesOption = contact.categories.map((i) => {\r\n            return { \"value\": i, \"label\": i }\r\n        });\r\n    } else {\r\n        newCategoriesOption = contact.categories;\r\n    }\r\n    console.log(\"contact.categories\", contact.categories)\r\n    console.log(\"contact\", contact)\r\n    const [optionsselected, setOptionsSelected] = useState(newCategoriesOption)\r\n    const animatedComponents = makeAnimated();\r\n    const Option = props => {\r\n        return (\r\n            <div>\r\n                <components.Option {...props}>\r\n                    <input type=\"checkbox\" className=\"input\" checked={props.isSelected} onChange={() => null} />\r\n                    {\"\"}\r\n                    <label>{props.label}</label>\r\n                </components.Option>\r\n            </div>\r\n        );\r\n    };\r\n    const handleChange = props => {\r\n        setOptionsSelected(props.selected);\r\n    };\r\n    const MultiValue = props => (<components.MultiValue {...props}><span>{props.data.label}</span></components.MultiValue>);\r\n    return (\r\n        <tr>\r\n            <td onChange={handleEditFormChange}><input type=\"text\" className=\"input\" name=\"field\" readOnly={true} value={editFormData.field} onChange={handleEditFormChange}></input></td>\r\n            <td>\r\n                <td><input className=\"input\" type=\"radio\" onChange={event => handleClick(event.target.value)} id=\"html\" name=\"fav_language\" value={contact.field} /></td>\r\n            </td>\r\n            <td><input type=\"text\" className=\"input\" required=\"required\" placeholder=\"Enter an Lower_limit...\" name=\"lower_limit\" value={editFormData.lower_limit} onChange={handleEditFormChange}></input></td>\r\n            <td><input type=\"text\" className=\"input\" required=\"required\" placeholder=\"Enter a upper limit...\" name=\"upper_limit\" value={editFormData.upper_limit} onChange={handleEditFormChange}></input></td>\r\n            <td>\r\n\r\n                {/* <input type=\"email\" className=\"input\" readOnly={true} name=\"data_type\" value={editFormData.data_type} onChange={handleEditFormChange}></input> */}\r\n\r\n                <select name=\"data_type\" onChange={handleEditFormChange} value={editFormData.data_type}>\r\n                    <option value=\"email\">email</option>\r\n                    <option value=\"numerical\">numerical</option>\r\n                    <option value=\"datetime\">date</option>\r\n                    <option value=\"categorical\">categorical</option>\r\n                    <option value=\"boolean\">boolean</option>\r\n                    <option value=\"address\">address</option>\r\n                </select>\r\n            </td>\r\n            {(contact.field === \"Account_Number\" || contact.field === \"Credit_limit\" || contact.field === \"Billing_cycle\" || contact.field === \"Equifax_Score\" || contact.field === \"Cash_limit\" || contact.field === \"Balance\") && <>\r\n                <td><input type=\"email\" className=\"input\" readOnly={true} name=\"categories\" value={editFormData.categories} onChange={handleEditFormChange}></input></td>\r\n            </>}\r\n            {contact.field === \"Call_type\" && <>\r\n                <td><MySelect options={newCategoriesOption} isMulti closeMenuOnSelect={false} hideSelectedOptions={false} components={{ Option, MultiValue, animatedComponents }} onChange={handleChange} allowSelectAll={false} value={optionsselected} /></td>\r\n            </>}\r\n            {contact.field === \"Block_code\" && <>\r\n                <td><MySelect options={newCategoriesOption} isMulti closeMenuOnSelect={false} hideSelectedOptions={false} components={{ Option, MultiValue, animatedComponents }} onChange={handleChange} allowSelectAll={false} value={optionsselected} /></td>\r\n            </>}\r\n            {contact.field === \"Exclusion_Flag\" && <>\r\n                <td><MySelect options={newCategoriesOption} isMulti closeMenuOnSelect={false} hideSelectedOptions={false} components={{ Option, MultiValue, animatedComponents }} onChange={handleChange} allowSelectAll={false} value={optionsselected} /></td>\r\n            </>}\r\n            <td><button type=\"submit\" onClick={(event) => handleEditFormSubmit(event, contact)} className=\"btn btnBlue\">Save</button><button type=\"button\" onClick={handleCancelClick} className=\"btn btnBlue\">Cancel</button></td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default EditableRow;","export default __webpack_public_path__ + \"static/media/zensarlogo.63409a37.png\";","import React, { useEffect } from 'react'\r\nimport zensarlogo from '../../images/zensarlogo.png'\r\nimport AOS from 'aos';\r\nimport 'aos/dist/aos.css';\r\nimport '../navbar/navbar.css'\r\n\r\nfunction Navbar() {\r\n    useEffect(() => {\r\n        AOS.init();\r\n    }, []);\r\n    return (\r\n        <>\r\n            <nav className=\"navigbar\" >\r\n                <div className=\"max\">\r\n                    <div className=\"flex\">\r\n                        <a href=\"#\">\r\n                            <img src={zensarlogo}  style={{width : \"210px\", marginTop:\"-70px\",marginBottom:\"90px\",marginLeft:\"20px\"}}/>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from \"react\";\r\n//import React, { useState} from 'react';\r\nimport \"./modal.css\";\r\n\r\n// function Modal({ props }) {\r\nfunction Modal({ setOpenModal }) {\r\n  return (\r\n    <div className=\"modalBackground\">\r\n      <div className=\"modalContainer11\">\r\n        <div className=\"titleCloseBtn\">\r\n          <button\r\n            onClick={() => {\r\n              setOpenModal(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"body11\">\r\n      \r\n          <p> \" THE DATA IS BEING PUSHED TO THE DATABASE \"</p>\r\n          \r\n          \r\n          \r\n        </div>\r\n        \r\n        <div className=\"footer11\">\r\n          <button className=\"btn btnGreen\"\r\n            onClick={() => {\r\n              setOpenModal(false);\r\n            }}\r\n            //id=\"okBtn\"\r\n          >\r\n            Close\r\n          </button>\r\n         \r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState } from 'react';\r\nimport { Modal, Button, Spinner } from 'react-bootstrap';\r\nimport './modal1.css';\r\n\r\nfunction Modal1({ setOpenModal1, btnClass1, setBtnClass1 }) {\r\n  const [file1, setFile1] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const close1 = async (event) => {\r\n    setIsLoading(true);\r\n    setOpenModal1(false);\r\n    setBtnClass1(true);\r\n\r\n    // Check if a file has been selected\r\n    if (file1) {\r\n      try {\r\n        // Trigger file download\r\n        const url = URL.createObjectURL(file1);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', file1.name);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url); // Clean up the URL object\r\n      } catch (error) {\r\n        console.error('Error downloading file:', error);\r\n        // Display an error message to the user\r\n        alert('There was an error downloading the file. Please try again later.');\r\n      } finally {\r\n        setIsLoading(false);\r\n        // // Refresh the page\r\n        // window.location.reload();\r\n      }\r\n    }\r\n    // else{\r\n    //   window.location.reload();\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show\r\n      onHide={() => setOpenModal1(false)}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Data generation is completed.\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>Please visit the Downloads folder to view generated synthetic data.</p>\r\n        {isLoading && (\r\n          <div className=\"spinner-container\">\r\n            <Spinner animation=\"border\" role=\"status\">\r\n              <span className=\"visually-hidden\">Loading...</span>\r\n            </Spinner>\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"success\" onClick={close1}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Modal1;","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Modal2(props) {\r\n  useEffect(() => {\r\n    console.log(\"Props in modal 2 are: \", props);\r\n  }, []);\r\n\r\n  let dataFrame = props.contacts;\r\n  let success = [];\r\n\r\n  console.log(\"props.condition : \", props.condition);\r\n\r\n  if (props.condition === true) {\r\n    success = [\r\n      props.selectedfield,\r\n      props.selectedrelation,\r\n      props.num,\r\n      props.selectedfield1,\r\n    ];\r\n  }\r\n\r\n  const [btnClass1, setBtnClass1] = useState(false);\r\n  const [userinfo, setUserInfo] = useState(props.contacts);\r\n\r\n  const handleChange = (e) => {\r\n    const { value, checked } = e.target;\r\n    // Handle checkbox change if needed\r\n  };\r\n\r\n  const downloadData = async (event) => {\r\n    props.setOpenModal2(false);\r\n    // props.setOpenModal1(true);\r\n    props.setOpenModal4(true);\r\n    btnClass1 ? setBtnClass1(false) : setBtnClass1(true);\r\n    event.preventDefault();\r\n    try {\r\n      const address = props.metaData.columns.address;\r\n      if (address) {\r\n        props.metaData.columns.address.pii = true;\r\n        props.metaData.columns.address.sdtype = \"address\";\r\n      }\r\n      const name = props.metaData.columns.name;\r\n      if (name) {\r\n        props.metaData.columns.name.pii = true;\r\n        props.metaData.columns.name.sdtype = \"name\";\r\n      }\r\n\r\n      Object.keys(props.metaData.columns).map((columnName) => {\r\n        if (props.metaData.columns[columnName].sdtype === \"unknown\") {\r\n          props.metaData.columns[columnName].sdtype = \"categorical\";\r\n          delete props.metaData.columns[columnName].pii;\r\n        }\r\n      });\r\n\r\n      // List of columns to convert to \"numerical\"\r\n      let numericalColumns = [\r\n        \"BILLINGADVICEID\",\r\n        \"BILLINGACCOUNTNUMBER\",\r\n        \"ACCOUNTKEY\",\r\n        \"AMDOCSUSERID\",\r\n        \"SHORTNAMEKEY\",\r\n        \"SHORTNAME\",\r\n        \"STATEMENTINTERCHANGEKEY\",\r\n        \"SENDERBIC\",\r\n        \"CURRENCYCODE\",\r\n        \"STOPPAYMENTTYPE\",\r\n        \"AUTHORISESTATUS\",\r\n        \"DO_DEBITORDERREF\",\r\n        \"DO_BENEFICIARYNAME\"\r\n      ];\r\n      // Convert specified columns to \"numerical\"\r\n      numericalColumns.forEach((columnName) => {\r\n        if (props.metaData.columns[columnName] != undefined) {\r\n          if (props.metaData.columns[columnName].sdtype === \"unknown\") {\r\n            props.metaData.columns[columnName].sdtype = \"numerical\";\r\n            delete props.metaData.columns[columnName].pii;\r\n            // props.metaData.columns[columnName].pii = \"categorical\",\r\n          }\r\n        }\r\n      });\r\n      console.log(\"line 83 in modal2\", props.metaData);\r\n      const response = await fetch(process.env.REACT_APP_API_NewSamples, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          no_of_samples: props.message,\r\n          metaData: props.metaData,\r\n        }),\r\n      });\r\n      console.log(\"responce in download data : \", response);\r\n      props.setOpenModal1(true);\r\n      props.setOpenModal4(false);\r\n      const blob = await response.blob();\r\n      if (response.status === 200) {\r\n        return blob;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"error in pi new_samples : \", error);\r\n      throw new Error(error.message);\r\n    }\r\n  };\r\n\r\n  const downloadData2 = async (event) => {\r\n    props.setOpenModal2(false);\r\n    // props.setModalOpen4(true);\r\n    btnClass1 ? setBtnClass1(false) : setBtnClass1(true);\r\n    event.preventDefault();\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_API_NewSamples, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(userinfo),\r\n      });\r\n      const blob = await response.blob();\r\n      if (response.status === 200) {\r\n        return blob;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"downloadData2: new_sample api failed\");\r\n      return error.message;\r\n    }\r\n  };\r\n\r\n  const dummy = async (event) => {\r\n    try {\r\n      const blob = await downloadData(event);\r\n      if (blob) {\r\n        setTimeout(() => {\r\n          saveAs(blob, \"Synthetic_generated_Data.xlsx\");\r\n        }, 3000);\r\n        // props.setModalOpen4(false);\r\n        // props.setModalOpen5(true);\r\n        props.setCondition(false);\r\n      } else {\r\n        console.error(\"No blob data received\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error downloading data:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={true}\r\n      onHide={() => props.setOpenModal2(false)}\r\n      centered\r\n      className=\"modal-container\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>\r\n          <b>Uploaded</b>\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div>\r\n          <h5>The uploaded sample file contains {props.rows} rows.</h5>\r\n        </div>{\" \"}\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer className=\"modal-footer-centered\">\r\n        <Button\r\n          variant=\"primary\"\r\n          className={`btn-success ${btnClass1 ? \"btnClass1\" : \"\"}`}\r\n          onClick={dummy}\r\n        >\r\n          Confirm\r\n        </Button>\r\n        <Button\r\n          variant=\"secondary\"\r\n          className=\"btn-danger\"\r\n          onClick={() => props.setOpenModal2(false)}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Modal2;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, ProgressBar } from 'react-bootstrap';\r\nimport './modal5.css';\r\n\r\nlet progressInterval = null;\r\n\r\nfunction Modal5({ setOpenModal5, btnClass1, setBtnClass1, setModalOpen1 }) {\r\n  \r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    progressInterval = setInterval(() => {\r\n      setProgress(prev => prev + 1);\r\n    },30);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (progress >= 100) {\r\n      clearInterval(progressInterval);\r\n      //setOpenModal4(false)\r\n      console.log(\"I cleared progress interval and set modal 1 open\");\r\n      setOpenModal5(false)\r\n      // setModalOpen1(true)\r\n    }\r\n  }, [progress]);\r\n\r\n  const close = async (event) => {\r\n    setOpenModal5(false);\r\n    setBtnClass1(true)\r\n    //setBtnColor(\"#0091ea\")\r\n  }\r\n  \r\n  return (\r\n    <Modal\r\n      show\r\n      onHide={() => setOpenModal5(false)}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          The data generation is in progress!\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <ProgressBar now={progress} label={`${progress}%`} />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant=\"success\"\r\n          onClick={(event) => close(event)}\r\n        >\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Modal5;","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, Button, Spinner } from \"react-bootstrap\";\r\nimport Modal5 from \"../../components/modal5/Modal5\";\r\nimport \"./modal4.css\";\r\n\r\nlet progressInterval = null;\r\n\r\nfunction Modal4({ setOpenModal4, setModalOpen5, message2 }) {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    progressInterval = setInterval(() => {\r\n      setProgress((prev) => prev + 1);\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearInterval(progressInterval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (progress >= 100) {\r\n      clearInterval(progressInterval);\r\n      setOpenModal4(false);\r\n      //setModalOpen5(true);\r\n    }\r\n  }, [progress, setOpenModal4, setModalOpen5]);\r\n\r\n  return (\r\n    <Modal\r\n      show\r\n      onHide={() => setOpenModal4(false)}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"loadingModal\"\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n      style={{ backgroundColor: \"rgba(0, 0, 0, 0.5)\" }}\r\n    >\r\n      <div\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <Spinner\r\n            animation=\"border\"\r\n            variant=\"primary\"\r\n            role=\"status\"\r\n            className=\"spinner mb-3\"\r\n          >\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n          <div\r\n            className=\"mt-3 text-center text-white\"\r\n            style={{ fontSize: \"1.2rem\" }}\r\n          >\r\n            Please Wait\r\n          </div>\r\n          <div\r\n            className=\"text-center text-white\"\r\n            style={{ fontSize: \"1.2rem\" }}\r\n          >\r\n            Preparing your file for download...\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default Modal4;\r\n","//import React from \"react\";\r\nimport React, { useState, useEffect} from 'react';\r\nimport \"./modal6.css\";\r\n\r\nfunction Modal6({ \r\n  setOpenModal6, \r\n  selectedfield, \r\n  handleSelect6, \r\n  selectedrelation, \r\n  handleSelect7, \r\n  selectedfield1,\r\n  handleSelect8,\r\n  handleChange6,\r\n   num, \r\n   setNum\r\n  \r\n \r\n  \r\n  }) \r\n{\r\n  const [selected6, setSelected6] = useState();\r\n  let companies =  [{ name: 'Credit_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Cash_limit','Balance']},{ name: 'Cash_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Credit_limit','Balance']}];\r\n  // const [selectedfield, setselectedField] =  useState('Credit_limit')\r\n  // const [selectedrelation, setselectedRelation] =  useState()\r\n  // const [selectedfield1, setselectedField1] =  useState()\r\n  // let [num, setNum]= useState(0);\r\n  let incNum =()=>{\r\n    if(num<100)\r\n    {\r\n    setNum((num + 10));\r\n    }\r\n  };\r\n  let decNum = () => {\r\n     if(num>0)\r\n     {\r\n      setNum((num - 10));\r\n     }\r\n  }\r\n//  let handleChange = (e)=>{\r\n//    setNum(e.target.value);\r\n//   }\r\n  // const handleSelect6 = event => {\r\n  //   setselectedField(event.target.value)\r\n  // }\r\n  // const handleSelect7 = event => {\r\n  //   setselectedRelation(event.target.value)\r\n  // }\r\n  // const handleSelect8 = event => {\r\n  //   setselectedField1(event.target.value)\r\n  // }\r\n  let company = companies.filter(company => {\r\n    return company.name === selectedfield\r\n  })\r\n  // const downloadData6 = async (event) =>{\r\n  //   setOpenModal6(false);\r\n  //   event.preventDefault();\r\n  //   try{\r\n  //     const USER_DATA6 = {\r\n  //           \"Feild1\" : selectedfield,\r\n  //           \"Relation\" : selectedrelation,\r\n  //           \"Percentage\": num,\r\n  //           \"Feild2\" : selectedfield1\r\n\r\n  //     }\r\n  //     const response = await fetch(\"http://localhost:8000/new_samples\", {\r\n  \r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\"\r\n  //         // \"Content-Type\": \"multipart/form-data\"\r\n  //       },\r\n  //       // body: formData\r\n  //       body: JSON.stringify(USER_DATA6)\r\n  //     });\r\n  \r\n  //     // const blob = await response.blob();\r\n  //     // saveAs(blob)\r\n  //      //success = \"Data generation has done\"\r\n  //      //console.log(success)\r\n  //     // if (response.status === 200) {\r\n  //     //   // setTimeout(() => {\r\n  //     //   //   saveAs(blob, \"my_file.xlsx\") \r\n  //     //   // },3000);\r\n  //     //   return blob;\r\n  //     // }\r\n  //   }catch (error) {\r\n  //     return error.message\r\n  //   }\r\n  // }\r\n  return (\r\n    <div className=\"modalBackground\">\r\n    <div className=\"modalContainer6\">\r\n      <div className=\"titleCloseBtn\">\r\n        <button\r\n          onClick={() => {\r\n            setOpenModal6(false);\r\n          }}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n      <div className=\"topic\"><h3 style={{position:\"absolute\",left:\"150px\",top:\"20px\"}}><b>Define rule for sampling</b></h3></div>\r\n      <div className=\"body6\" style={{position:\"absolute\",top:\"120px\"}}>\r\n      \r\n      {/* <label style={{position:\"absolute\",left:\"110px\"}}><b>Credit_limit:</b></label> */}\r\n      {/* <select name=\"label_name\" id=\"label_name\" style={{position:\"absolute\",left:\"110px\"}} onChange={handleSelect6} value={selected6}>\r\n          \r\n                                \r\n                                   \r\n          <option value=\"Credit_limit\">Credit_limit</option>\r\n          <option value=\"Cash_limit\">Cash_limit</option>\r\n         \r\n         \r\n           \r\n        \r\n</select> */}\r\n<select value={selectedfield} onChange={event => handleSelect6(event.target.value)} style={{position:\"absolute\",left:\"70px\"}}>\r\n          {\r\n            companies.map((company, i) => {\r\n              return <option>{company.name}</option>\r\n            })\r\n          }\r\n        </select>\r\n      \r\n      <select  value = {selectedrelation} name=\"relation\" id=\"relation\" style={{position:\"absolute\",left:\"170px\"}} onChange={event => handleSelect7(event.target.value)}>\r\n          \r\n                                \r\n                                   \r\n                                  <option value=\"gretaer_than\">&gt;</option>\r\n                                  <option value=\"less_than\">&lt;</option>\r\n                                  <option value=\"equal_to\">=</option>\r\n                                   \r\n                                \r\n    </select>\r\n    \r\n    <div style={{position:\"absolute\",left:\"220px\"}}>\r\n    <button  type=\"button\"  value = {num} onClick={decNum} >-</button>\r\n  </div>\r\n  <input type=\"text\" class=\"form-control\" value={num+\"%\"} onChange={event => handleChange6(event.target.value)} style={{width:\"25px\",position:\"absolute\",left:\"240px\"}}></input>\r\n  <div style={{position:\"absolute\",left:\"270px\"}}>\r\n    <button class=\"btn btn-outline-primary\" type=\"button\" value = {num} onClick={incNum}>+</button>\r\n  </div>\r\n  \r\n    {/* <select name=\"feild_name\" id=\"feild_name\" style={{position:\"absolute\",left:\"270px\"}}>\r\n          \r\n                                \r\n                                   \r\n                                  <option value=\"Billing_cycle\">Billing_cycle</option>\r\n                                  <option value=\"Equifax_score\">Equifax_score</option>\r\n                                  <option value=\"Cash_limit\">Cash_limit</option>\r\n                                  <option value=\"Balance\">Balance</option>\r\n                                 \r\n                                   \r\n                                \r\n    </select>\r\n        */}\r\n        <select  value = {selectedfield1} style={{position:\"absolute\",left:\"320px\"}} onChange={event => handleSelect8(event.target.value)}>\r\n          {\r\n            \r\n            company[0].jobs.map((job, i) => {\r\n              return <option>{job}</option>\r\n            })\r\n          }\r\n        </select>\r\n        \r\n        \r\n        \r\n      </div>\r\n      \r\n      <div className=\"footer6\">\r\n        <button onClick={() => {\r\n            setOpenModal6(false);\r\n          }}\r\n          id=\"okBtn\"\r\n        >\r\n          Save and close\r\n        </button>\r\n       \r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n);\r\n}\r\n\r\nexport default Modal6;\r\n","//import React from \"react\";\r\nimport React, { useState, useEffect} from 'react';\r\nimport \"./modal7.css\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nfunction Modal7({setOpenModal7, contacts, setModalOpen8, setModalOpen5}) \r\n{\r\n  \r\n  const [lowerLimit, setlowerLimit] = useState();\r\n  const [samples, setSamples] = useState();\r\n  const [selected72, setSelected72] =useState();\r\n  const handleChange71 = event => {\r\n    setlowerLimit(event.target.value);\r\n    event.preventDefault();\r\n\r\n  };\r\n  const handleChange72 = event => {\r\n    setSamples(event.target.value);\r\n    event.preventDefault();\r\n\r\n  };\r\n  const handleClick72 = event => {\r\n    setSelected72(event.target.value);\r\n    event.preventDefault();\r\n\r\n  };\r\n  const downloadData71 = async (event) => {\r\n    setOpenModal7(false);\r\n    setModalOpen8(true)\r\n    const USER_DATA71 = {\r\n       \"contraint_list\" : [selected72, parseFloat(lowerLimit),parseInt(samples)]\r\n       \r\n        \r\n          }\r\n          console.log(USER_DATA71)\r\n    try{\r\n    const response = await fetch(\"http://localhost:8000/conditional_sampling\", {\r\n\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n        // \"Content-Type\": \"multipart/form-data\"\r\n      },\r\n      // body: formData\r\n      body: JSON.stringify(USER_DATA71)\r\n    });\r\n\r\n    const blob = await response.blob();\r\n    if (response.status === 200) {\r\n        return blob;\r\n    }\r\n    }catch (error) {\r\n    return error.message\r\n  }\r\n  }\r\n  const dummy1 = async(event) => {\r\n    const res = await downloadData71(event); \r\n    setTimeout(() => {\r\n      saveAs(res, \"Synthetic_constraint_data.xlsx\") \r\n    },3000);\r\n   // props.success= \"Data generation has done\"\r\n    setModalOpen8(false)\r\n    setModalOpen5(true)\r\n   // console.log(res)\r\n  } \r\n//   let companies =  [{ name: 'Credit_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Cash_limit','Balance']},{ name: 'Cash_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Credit_limit','Balance']}];\r\n  // const [selectedfield, setselectedField] =  useState('Credit_limit')\r\n  // const [selectedrelation, setselectedRelation] =  useState()\r\n  // const [selectedfield1, setselectedField1] =  useState()\r\n  // let [num, setNum]= useState(0);\r\n  \r\n//  let handleChange = (e)=>{\r\n//    setNum(e.target.value);\r\n//   }\r\n  // const handleSelect6 = event => {\r\n  //   setselectedField(event.target.value)\r\n  // }\r\n  // const handleSelect7 = event => {\r\n  //   setselectedRelation(event.target.value)\r\n  // }\r\n  // const handleSelect8 = event => {\r\n  //   setselectedField1(event.target.value)\r\n  // }\r\n  \r\n  // const downloadData6 = async (event) =>{\r\n  //   setOpenModal6(false);\r\n  //   event.preventDefault();\r\n  //   try{\r\n  //     const USER_DATA6 = {\r\n  //           \"Feild1\" : selectedfield,\r\n  //           \"Relation\" : selectedrelation,\r\n  //           \"Percentage\": num,\r\n  //           \"Feild2\" : selectedfield1\r\n\r\n  //     }\r\n  //     const response = await fetch(\"http://localhost:8000/new_samples\", {\r\n  \r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\"\r\n  //         // \"Content-Type\": \"multipart/form-data\"\r\n  //       },\r\n  //       // body: formData\r\n  //       body: JSON.stringify(USER_DATA6)\r\n  //     });\r\n  \r\n  //     // const blob = await response.blob();\r\n  //     // saveAs(blob)\r\n  //      //success = \"Data generation has done\"\r\n  //      //console.log(success)\r\n  //     // if (response.status === 200) {\r\n  //     //   // setTimeout(() => {\r\n  //     //   //   saveAs(blob, \"my_file.xlsx\") \r\n  //     //   // },3000);\r\n  //     //   return blob;\r\n  //     // }\r\n  //   }catch (error) {\r\n  //     return error.message\r\n  //   }\r\n  // }\r\n  return (\r\n    <div className=\"modalBackground\">\r\n    <div className=\"modalContainer6\">\r\n      <div className=\"titleCloseBtn\">\r\n        <button\r\n          onClick={() => {\r\n            setOpenModal7(false);\r\n          }}\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n      <div className=\"topic\"><h3 style={{position:\"absolute\",left:\"130px\",top:\"5px\"}}><b>Conditional Data  Generation</b></h3></div>\r\n      <div className=\"body6\" style={{position:\"absolute\",top:\"120px\"}}>\r\n      \r\n      {/* <label style={{position:\"absolute\",left:\"110px\"}}><b>Credit_limit:</b></label> */}\r\n      {/* <select name=\"label_name\" id=\"label_name\" style={{position:\"absolute\",left:\"110px\"}} onChange={handleSelect6} value={selected6}>\r\n          \r\n                                \r\n                                   \r\n          <option value=\"Credit_limit\">Credit_limit</option>\r\n          <option value=\"Cash_limit\">Cash_limit</option>\r\n         \r\n         \r\n           \r\n        \r\n</select> */}\r\n <div style={{position: \"absolute\", left:\"230px\",bottom:\"40px\"}}>\r\n<label style = {{position:\"absolute\", left:\"-130px\"}}><b>Select fieldName:</b></label>\r\n <select name=\"field71\" id=\"field71\" onChange={handleClick72} value={selected72} style = {{position : \"absolute\", left :\"38px\"}}>\r\n          \r\n          {\r\n             contacts.map((contact) =>(\r\n              contact.data_type===\"Numeric\" &&\r\n              <option>{contact.field}</option>\r\n            //  <option>{contact.data_type===\"Numeric\" ? contact.field:undefined}</option>\r\n           ))\r\n\r\n          }\r\n    </select>\r\n </div>\r\n  <div style={{position: \"absolute\", left:\"268px\",bottom:\"-10px\"}}>\r\n  <label style = {{position:\"absolute\", left:\"-130px\"}}><b>Lower limit:</b></label>\r\n    <input style={{ position: \"absolute\",width: \"140px\"}}\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter lowerLimit...\"\r\n          onChange={handleChange71}\r\n          value={lowerLimit}\r\n        />  \r\n </div>  \r\n<div style={{position: \"absolute\", left:\"250px\",bottom:\"-60px\"}}>\r\n<label style = {{position:\"absolute\", left:\"-170px\"}}><b>Number of samples:</b></label>\r\n<input style={{ position: \"absolute\" ,width: \"140px\",left:\"17px\"}}\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter number of samples...\"\r\n          onChange={handleChange72}\r\n          value={samples}\r\n        />    \r\n</div>\r\n  \r\n\r\n    \r\n    \r\n \r\n  \r\n  \r\n    {/* <select name=\"feild_name\" id=\"feild_name\" style={{position:\"absolute\",left:\"270px\"}}>\r\n          \r\n                                \r\n                                   \r\n                                  <option value=\"Billing_cycle\">Billing_cycle</option>\r\n                                  <option value=\"Equifax_score\">Equifax_score</option>\r\n                                  <option value=\"Cash_limit\">Cash_limit</option>\r\n                                  <option value=\"Balance\">Balance</option>\r\n                                 \r\n                                   \r\n                                \r\n    </select>\r\n        */}\r\n       \r\n        \r\n        \r\n        \r\n      </div>\r\n      \r\n      <div className=\"footer6\">\r\n        <button className=\"btn btnGreen\" style={{width:\"90px\"}}onClick={(event) => dummy1(event)}\r\n          id=\"okBtn\"\r\n        >\r\n          Generate\r\n        </button>\r\n       \r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n);\r\n}\r\n\r\nexport default Modal7;\r\n","//import React from \"react\";\r\nimport React, { useState, useEffect} from 'react';\r\nimport Modal5 from '../../components/modal5/Modal5';\r\nimport \"./modal8.css\";\r\nlet progressInterval = null;\r\n// function Modal4({ props }) {\r\nfunction Modal8({ setOpenModal8, setModalOpen5,}) {\r\n  const [progress, setProgress] = useState(0);\r\n  useEffect(() => {\r\n    progressInterval = setInterval(() => {\r\n      setProgress(prev => prev + 1);\r\n    }, 500);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (progress >= 100) {\r\n      clearInterval(progressInterval);\r\n      //setOpenModal4(false)\r\n      //setModalOpen5(true)\r\n    }\r\n  }, [progress]);\r\n  return (\r\n    <div className=\"modalBackground\">\r\n      <div className=\"modalContainer4\">\r\n        <div className=\"titleCloseBtn\">\r\n          <button\r\n            onClick={() => {\r\n              setOpenModal8(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n       \r\n        <div className=\"body4\">\r\n        \r\n        <p>Data generation is in progress. Please wait</p>\r\n       \r\n        <br></br>\r\n        {/* <div classname=\"progress w-50\" style={{height:\"30px\"}}>\r\n        <div classname=\"progress-bar\" role=\"progressbar\" style={{width:`${progress}%`}}>{progress}%\r\n        </div>\r\n        </div> */}\r\n        {/* <p> \" THE DATA IS SENT TO THE DATABASE \"</p> */}\r\n        \r\n        <div className=\"footer4\">\r\n          <button className=\"btn btnGreen\" \r\n            onClick={() => {\r\n              setOpenModal8(false);\r\n              setModalOpen5(true)\r\n            }}\r\n            //id=\"cancelBtn\"\r\n          >\r\n            Ok\r\n          </button>\r\n         </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal8;\r\n","import React from \"react\";\r\n\r\nconst ReadOnlyRow1 = ({ contact1, \r\n  handleEditClick1, \r\n  handleDeleteClick1,\r\n  num,\r\n  selectedfield,\r\n  selectedfield1,\r\n  handleSelect6,\r\n  companies\r\n }) => {\r\n  return (\r\n    <tr>\r\n      <td>{contact1.field1}</td>\r\n      <td>{contact1.relation1}</td>\r\n      <td>{contact1.number1}</td>\r\n      <td>{contact1.field2}</td>\r\n      <td>\r\n        <button className=\"btn btnBlue\"\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick1(event, contact1)}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button  className=\"btn btnRed\" type=\"button\" onClick={() => handleDeleteClick1(contact1.id)}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyRow1;\r\n","import React, {useState,useEffect}from \"react\";\r\n\r\nconst EditableRow1 = ({\r\n  editFormData1,\r\n  setEditFormData1,\r\n  handleEditFormChange1,\r\n  handleCancelClick1,\r\n  selectedrelation,\r\n  selectedfield,\r\n  handleSelect6,\r\n  handleSelect7,\r\n  num,\r\n  handleChange6,\r\n  setNum,\r\n  incNum,\r\n  decNum,\r\n  selectedfield1,\r\n  handleSelect8,\r\n  handleEditFormSubmit1,\r\n  contact1,\r\n  editContactId1,\r\n  setEditContactId1\r\n  // handleSelect61,\r\n  // selectedfield61\r\n}) => {\r\n  useEffect(() => {\r\n    \r\n    \r\n  });\r\n  const [selectedfield61, setSelectedField61] = useState(contact1.field1);\r\n  const [selectedfield62, setSelectedField62] = useState(contact1.field2);\r\n  const [selectedrelation11, setSelectedRelation11] = useState(contact1.relation1);\r\n  const [num1, setNum1] = useState(contact1.number1)\r\n  let filteredArray = [];\r\n\r\n  const handleSelect61 = (event) => {\r\n    //event.preventDefault();\r\n    //console.log(contactss)\r\n    // setEditContactId1(contact1.id);\r\n    // console.log(editContactId1)\r\n\r\n    // const formValues = {\r\n    //   field1: contact1.field1,\r\n    //   relation1: contact1.relation1,\r\n    //   number1: contact1.number1,\r\n    //   field2: contact1.field2,\r\n    // };\r\n    // console.log(formValues.field1)\r\n    // setEditFormData1(formValues);\r\n    // setSelectedField61(formValues.field1)\r\n    //setEditFormData1(event.target.value)\r\n  //console.log(event.target.value);\r\n  \r\n  setSelectedField61(event.target.value);\r\n  console.log(event.target.value)\r\n  const fieldName1 =\"field1\";\r\n  const fieldValue1 =event.target.value;\r\n\r\n    const newFormData1 = { ...editFormData1 };\r\n    newFormData1[fieldName1] = fieldValue1;\r\n\r\n    setEditFormData1(newFormData1);\r\n  };\r\n  const handleSelect62 = event => {\r\n    console.log(event.target.value);\r\n    setSelectedField62(event.target.value);\r\n    const fieldName1 =\"field2\";\r\n    const fieldValue1 =event.target.value;\r\n  \r\n      const newFormData1 = { ...editFormData1 };\r\n      newFormData1[fieldName1] = fieldValue1;\r\n  \r\n      setEditFormData1(newFormData1);\r\n    };\r\n\r\n    const handleSelect71 = event => {\r\n      console.log(event.target.value);\r\n      setSelectedRelation11(event.target.value);\r\n      const fieldName1 =\"relation1\";\r\n      const fieldValue1 =event.target.value;\r\n    \r\n        const newFormData1 = { ...editFormData1 };\r\n        newFormData1[fieldName1] = fieldValue1;\r\n    \r\n        setEditFormData1(newFormData1);\r\n      };\r\n      \r\n      let incNum1 =()=>{\r\n        if(num1<100)\r\n        {\r\n        setNum1((num1 + 10));\r\n        const fieldName1 =\"number1\";\r\n        const fieldValue1 = num1+10;\r\n        \r\n        const newFormData1 = { ...editFormData1 };\r\n        newFormData1[fieldName1] = fieldValue1;\r\n        console.log(newFormData1)\r\n        setEditFormData1(newFormData1);\r\n        }\r\n      };\r\n      let decNum1 = () => {\r\n         if(num1>0)\r\n         {\r\n          setNum1((num1 - 10));\r\n          const fieldName1 =\"number1\";\r\n          const fieldValue1 = num1-10;\r\n        \r\n        const newFormData1 = { ...editFormData1 };\r\n        newFormData1[fieldName1] = fieldValue1;\r\n        console.log(newFormData1)\r\n        setEditFormData1(newFormData1);\r\n         }\r\n      }\r\n      const handleChange61 = event =>{\r\n        //event.preventDefault();\r\n        //setSelectedRelation11(event.target.value)\r\n         const fieldName1 =\"number1\";\r\n          const fieldValue1 = event.target.value;\r\n          \r\n          const newFormData1 = { ...editFormData1 };\r\n          newFormData1[fieldName1] = fieldValue1;\r\n          console.log(newFormData1)\r\n          setEditFormData1(newFormData1);\r\n      }\r\n  let companies =  [{ name: 'Credit_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Cash_limit','Balance']},{ name: 'Cash_limit',  jobs: ['Billing_cycle', 'Equifax_score', 'Credit_limit','Balance']}];\r\n  let company = companies.filter(company => {\r\n    return company.name === selectedfield61\r\n  })\r\n  return (\r\n    <tr>\r\n      <td style={{border: \"1px solid #ffffff\",textAlign:\"center\",padding:\"8px\",fontSize:\"12px\",width:\"120px\"}}>\r\n      <select value={selectedfield61} name=\"field11\" onChange={handleSelect61}>\r\n      {/* <option value={contact1.field1} selected>\r\n              {contact1.field1}\r\n            </option> */}\r\n     \r\n          {\r\n             companies.map((company, i) => {\r\n              return <option value={company.name}>{company.name}</option>\r\n            })\r\n          \r\n          }\r\n          \r\n        </select>\r\n      </td>\r\n      <td style={{border: \"1px solid #ffffff\",textAlign:\"center\",padding:\"8px\",fontSize:\"12px\"}}>\r\n      <select  value = {selectedrelation11} name=\"relation11\" id=\"relation1\" onChange={handleSelect71}>\r\n          \r\n                                \r\n          {/* <option value=\"Select an operator\">Select an option</option>                         */}\r\n          <option value=\"<\">&lt;</option>\r\n          <option value=\"<\">&gt;</option>\r\n          <option value=\"=\">=</option>\r\n           \r\n        \r\n      </select>\r\n      </td>\r\n      <td style={{border: \"1px solid #ffffff\",textAlign:\"center\",padding:\"8px\",fontSize:\"12px\"}}>\r\n        <div style={{display:\"flex\",justifyContent:\"space-around\"}}>\r\n          <div style={{marginLeft:\"37px\"}}>\r\n                  <button  type=\"button\"  value = {num1} onClick={decNum1} >-</button>\r\n          </div>\r\n                  <input type=\"text\" class=\"form-control\" value={num1+\"%\"} name=\"number11\"  style={{width:\"45px\",marginLeft:\"-30px\"}}></input>\r\n          <div style={{marginLeft:\"-40px\"}}>\r\n                  <button class=\"btn btn-outline-primary\" type=\"button\" value = {num1} onClick={incNum1}>+</button>\r\n          </div>\r\n        </div>\r\n      </td>\r\n      <td style={{border: \"1px solid #ffffff\",textAlign:\"center\",padding:\"8px\",fontSize:\"12px\",width:\"150px\"}}>\r\n      <select  value = {selectedfield62} name=\"field22\" onChange={handleSelect62}>\r\n          {\r\n            \r\n            company[0].jobs.map((job, i) => {\r\n              return <option>{job}</option>\r\n            })\r\n          }\r\n        </select>\r\n      </td>\r\n      <td style={{display:\"flex\",justifyContent:\"space-evenly\",padding:\"8px\"}}>\r\n        <button type=\"submit\" className=\"btn btnBlue\">Save</button>\r\n        <button type=\"button\" className=\"btn btnGrey\" onClick={handleCancelClick1}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow1;\r\n// import React from \"react\";\r\n\r\n// const EditableRow1 = ({\r\n//   editFormData1,\r\n//   handleEditFormChange1,\r\n//   handleCancelClick1,\r\n//   setEditFormData1,\r\n//   contact1,\r\n//   handleEditFormSubmit1\r\n// }) => {\r\n//   const handleEditFormChange = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const fieldName = event.target.getAttribute(\"name\");\r\n//     const fieldValue = event.target.value;\r\n\r\n//     const newFormData = { ...editFormData1 };\r\n//     newFormData[fieldName] = fieldValue;\r\n\r\n//     setEditFormData1(newFormData);\r\n//   };\r\n//   return (\r\n//     <tr>\r\n//       <td>\r\n//       <select value={selectedfield61} name=\"field1\" onChange={handleSelect61} style={{position:\"absolute\",left:\"29px\"}}>\r\n//           {\r\n//              companies.map((company, i) => {\r\n//                return <option>{company.name}</option>            })\r\n//           }\r\n//         </select>\r\n//       </td>\r\n//       <td>\r\n//         <input\r\n//           type=\"text\"\r\n//           required=\"required\"\r\n//           placeholder=\"Enter an address...\"\r\n//           name=\"relation1\"\r\n//           value={editFormData1.relation1}\r\n//           onChange={handleEditFormChange}\r\n//         ></input>\r\n//       </td>\r\n//       <td>\r\n//         <input\r\n//           type=\"text\"\r\n//           //required=\"required\"\r\n//           placeholder=\"Enter a phone number...\"\r\n//           name=\"number\"\r\n//           value={editFormData1.number1}\r\n//           onChange={handleEditFormChange}\r\n//         ></input>\r\n//       </td>\r\n//       <td>\r\n//         <input\r\n//           type=\"text\"\r\n//           required=\"required\"\r\n//           placeholder=\"Enter an email...\"\r\n//           name=\"feild2\"\r\n//           value={editFormData1.field2}\r\n//           onChange={handleEditFormChange}\r\n//         ></input>\r\n//       </td>\r\n//       <td>\r\n//         <button type=\"submit\" onClick={(event) =>  handleEditFormSubmit1(event, contact1)}>Save</button>\r\n//         <button type=\"button\" onClick={handleCancelClick1}>\r\n//           Cancel\r\n//         </button>\r\n//       </td>\r\n//     </tr>\r\n//   );\r\n// };\r\n\r\n// export default EditableRow1;\r\n","//import React from \"react\";\r\nimport React, { useState, useEffect, Fragment } from 'react';\r\nimport \"./modal9.css\";\r\nimport ReadOnlyRow1 from \"./ReadOnlyRow1.js\";\r\nimport EditableRow1 from \"./EditableRow1.js\"\r\nimport { nanoid } from \"nanoid\";\r\n//import data from \"./../mock-data.json\";\r\n\r\nfunction Modal9({\r\n  setOpenModal9,\r\n  selectedfield,\r\n  handleSelect6,\r\n  selectedrelation,\r\n  handleSelect7,\r\n  selectedfield1,\r\n  handleSelect8,\r\n  handleChange6,\r\n  num,\r\n  setNum,\r\n  addFormData1,\r\n  setAddFormData1,\r\n  contactss,\r\n  setContactss,\r\n  editFormData1,\r\n  setEditFormData1,\r\n  editContactId1,\r\n  setEditContactId1,\r\n  handleAddFormSubmit1,\r\n  btnclass,\r\n  setBtnClass,\r\n  setModalOpen10\r\n  // handleSelect61,\r\n  // selectedfield61\r\n}) {\r\n  useEffect(() => {\r\n    if (selectedfield === \"Credit_limit\" && selectedrelation === \"<\")\r\n      setModalOpen10(true)\r\n\r\n  });\r\n  const close1 = async (event) => {\r\n    setOpenModal9(false);\r\n    setBtnClass(true)\r\n    //setBtnColor(\"#0091ea\")\r\n  }\r\n  const upload1 = async (event) => {\r\n    setIsShown(true);\r\n    //setBtnColor(\"#0091ea\")\r\n  }\r\n  const [selected6, setSelected6] = useState();\r\n  const [isShown, setIsShown] = useState(false);\r\n  // const handleEditFormChange1 = (event) => {\r\n  //   //event.preventDefault();\r\n  //    event.target.value()\r\n  //   // const fieldName = event.target.getAttribute(\"name\");\r\n  //   // const fieldValue = event.target.value;\r\n\r\n  //   // const newFormData = { ...editFormData1 };\r\n  //   // newFormData[fieldName] = fieldValue;\r\n\r\n  //   // setEditFormData1(newFormData);\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact1 = {\r\n      id: nanoid(),\r\n      field1: addFormData1.field1,\r\n      relation1: addFormData1.relation,\r\n      number1: addFormData1.number1,\r\n      field2: addFormData1.field2,\r\n    };\r\n    console.log(newContact1)\r\n    const newContacts1 = [...contactss, newContact1];\r\n    setContactss(newContacts1);\r\n  };\r\n\r\n  const handleEditFormSubmit1 = (event, contact1) => {\r\n    event.preventDefault();\r\n    //setEditContactId1(contact1.id);\r\n    const editedContact = {\r\n      id: editContactId1,\r\n      field1: editFormData1.field1,\r\n      relation1: editFormData1.relation1,\r\n      number1: editFormData1.number1,\r\n      field2: editFormData1.field2,\r\n    };\r\n    console.log(editedContact)\r\n    const newContacts = [...contactss];\r\n\r\n    const index = contactss.findIndex((contact1) => contact1.id === editContactId1);\r\n\r\n    newContacts[index] = editedContact;\r\n    console.log(newContacts)\r\n    setContactss(newContacts);\r\n    setEditContactId1(null);\r\n  };\r\n\r\n  const handleEditClick1 = (event, contact1) => {\r\n    event.preventDefault();\r\n    console.log(contactss)\r\n    setEditContactId1(contact1.id);\r\n    console.log(editContactId1)\r\n\r\n    const formValues = {\r\n      field1: contact1.field1,\r\n      relation1: contact1.relation1,\r\n      number1: contact1.number1,\r\n      field2: contact1.field2,\r\n    };\r\n    console.log(formValues)\r\n    setEditFormData1(formValues);\r\n  };\r\n\r\n  const handleCancelClick1 = () => {\r\n    setEditContactId1(null);\r\n  };\r\n\r\n  const handleDeleteClick1 = (contactId) => {\r\n    const newContacts = [...contactss];\r\n\r\n    const index = contactss.findIndex((contact) => contact.id === contactId);\r\n\r\n    newContacts.splice(index, 1);\r\n\r\n    setContactss(newContacts);\r\n  };\r\n  let companies = [{ name: 'Credit_limit', jobs: ['Billing_cycle', 'Equifax_score', 'Cash_limit', 'Balance'] }, { name: 'Cash_limit', jobs: ['Billing_cycle', 'Equifax_score', 'Credit_limit', 'Balance'] }];\r\n  // const [selectedfield, setselectedField] =  useState('Credit_limit')\r\n  // const [selectedrelation, setselectedRelation] =  useState()\r\n  // const [selectedfield1, setselectedField1] =  useState()\r\n  // let [num, setNum]= useState(0);\r\n  let incNum = () => {\r\n    if (num < 100) {\r\n      setNum((num + 10));\r\n      const fieldName1 = \"number1\";\r\n      const fieldValue1 = num + 10;\r\n\r\n      const newFormData1 = { ...addFormData1 };\r\n      newFormData1[fieldName1] = fieldValue1;\r\n      console.log(newFormData1)\r\n      setAddFormData1(newFormData1);\r\n    }\r\n  };\r\n  let decNum = () => {\r\n    if (num > 0) {\r\n      setNum((num - 10));\r\n      const fieldName1 = \"number1\";\r\n      const fieldValue1 = num - 10;\r\n\r\n      const newFormData1 = { ...addFormData1 };\r\n      newFormData1[fieldName1] = fieldValue1;\r\n      console.log(newFormData1)\r\n      setAddFormData1(newFormData1);\r\n    }\r\n  }\r\n  //  let handleChange = (e)=>{\r\n  //    setNum(e.target.value);\r\n  //   }\r\n  // const handleSelect6 = event => {\r\n  //   setselectedField(event.target.value)\r\n  // }\r\n  // const handleSelect7 = event => {\r\n  //   setselectedRelation(event.target.value)\r\n  // }\r\n  // const handleSelect8 = event => {\r\n  //   setselectedField1(event.target.value)\r\n  // }\r\n  let company = companies.filter(company => {\r\n    return company.name === selectedfield\r\n  })\r\n  // const downloadData6 = async (event) =>{\r\n  //   setOpenModal6(false);\r\n  //   event.preventDefault();\r\n  //   try{\r\n  //     const USER_DATA6 = {\r\n  //           \"Feild1\" : selectedfield,\r\n  //           \"Relation\" : selectedrelation,\r\n  //           \"Percentage\": num,\r\n  //           \"Feild2\" : selectedfield1\r\n\r\n  //     }\r\n  //     const response = await fetch(\"http://localhost:8000/new_samples\", {\r\n\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\"\r\n  //         // \"Content-Type\": \"multipart/form-data\"\r\n  //       },\r\n  //       // body: formData\r\n  //       body: JSON.stringify(USER_DATA6)\r\n  //     });\r\n\r\n  //     // const blob = await response.blob();\r\n  //     // saveAs(blob)\r\n  //      //success = \"Data generation has done\"\r\n  //      //console.log(success)\r\n  //     // if (response.status === 200) {\r\n  //     //   // setTimeout(() => {\r\n  //     //   //   saveAs(blob, \"my_file.xlsx\") \r\n  //     //   // },3000);\r\n  //     //   return blob;\r\n  //     // }\r\n  //   }catch (error) {\r\n  //     return error.message\r\n  //   }\r\n  // }\r\n  return (\r\n    <div className=\"modalBackground\">\r\n      <div className=\"modalContainer9\">\r\n        <div className=\"titleCloseBtn\">\r\n          <button\r\n            onClick={() => {\r\n              setOpenModal9(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        <div className=\"topic\"><h3 style={{ position: \"absolute\", left: \"400px\", top: \"1px\" }}><b>Define rule for sampling</b></h3>\r\n          <hr size=\"3\" width=\"40%\" color=\"black\"></hr>\r\n        </div>\r\n\r\n        <div className=\"body9\" style={{ position: \"absolute\", top: \"90px\", left: \"150px\" }}>\r\n\r\n          <form onSubmit={handleAddFormSubmit1}>\r\n\r\n            {/* <label style={{position:\"absolute\",left:\"110px\"}}><b>Credit_limit:</b></label> */}\r\n            {/* <select name=\"label_name\" id=\"label_name\" style={{position:\"absolute\",left:\"110px\"}} onChange={handleSelect6} value={selected6}>\r\n          \r\n                                \r\n                                   \r\n          <option value=\"Credit_limit\">Credit_limit</option>\r\n          <option value=\"Cash_limit\">Cash_limit</option>\r\n         \r\n         \r\n           \r\n        \r\n</select> */}\r\n\r\n            <select value={selectedfield} name=\"field1\" onChange={event => handleSelect6(event.target.value)} style={{ position: \"absolute\", left: \"90px\" }}>\r\n              {\r\n                companies.map((company, i) => {\r\n                  return <option>{company.name}</option>\r\n                })\r\n              }\r\n            </select>\r\n\r\n\r\n            <select value={selectedrelation} name=\"relation\" id=\"relation1\" style={{ position: \"absolute\", left: \"260px\" }} onChange={event => handleSelect7(event.target.value)}>\r\n\r\n\r\n              {/* <option value=\">\">select a operator</option> */}\r\n              <option value=\"<\">&lt;</option>\r\n              <option value=\">\">&gt;</option>\r\n              <option value=\"=\">=</option>\r\n\r\n\r\n            </select>\r\n\r\n            <div style={{ position: \"absolute\", left: \"380px\" }}>\r\n              <button type=\"button\" value={num} onClick={decNum} >-</button>\r\n            </div>\r\n            <input type=\"text\" class=\"form-control\" value={num + \"%\"} name=\"number1\" style={{ width: \"45px\", position: \"absolute\", left: \"400px\" }}></input>\r\n            <div style={{ position: \"absolute\", left: \"450px\" }}>\r\n              <button type=\"button\" value={num} onClick={incNum}>+</button>\r\n            </div>\r\n\r\n\r\n            <select value={selectedfield1} name=\"field2\" style={{ position: \"absolute\", left: \"500px\" }} onChange={event => handleSelect8(event.target.value)}>\r\n\r\n              {\r\n\r\n                company[0].jobs.map((job, i) => {\r\n                  return <option>{job}</option>\r\n                })\r\n              }\r\n            </select>\r\n\r\n            <button type=\"submit\" className=\"btn btnBlue\" style={{ position: \"absolute\", left: \"660px\" }} onClick={upload1}>Add</button>\r\n          </form>\r\n        </div>\r\n        {isShown && (\r\n          <div>\r\n            <form style={{ display: \"flex\", gap: \"2px\" }} onSubmit={handleEditFormSubmit1} >\r\n              <table style={{ borderCollapse: \"collapse\", width: \"97%\", position: \"absolute\", top: \"120px\" }}>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={{ border: \"1px solid #ffffff\", textAlign: \"center\", padding: \"8px\", fontSize: \"13px\" }}>Field 1</th>\r\n                    <th>Relation</th>\r\n                    <th>Percentage</th>\r\n                    <th>Field 2</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {contactss.map((contact1) => (\r\n                    <Fragment>\r\n                      {editContactId1 === contact1.id ? (\r\n                        <EditableRow1\r\n                          editFormData1={editFormData1}\r\n                          setEditFormData1={setEditFormData1}\r\n                          //handleEditFormChange1 = {handleEditFormChange1}\r\n                          handleCancelClick1={handleCancelClick1}\r\n                          compaines={companies}\r\n                          selectedfield={selectedfield}\r\n                          selectedrelation={selectedrelation}\r\n                          handleSelect6={handleSelect6}\r\n                          handleSelect7={handleSelect7}\r\n                          num={num}\r\n                          handleChange6={handleChange6}\r\n                          incNum={incNum}\r\n                          decNum={decNum}\r\n                          setNum={setNum}\r\n                          selectedfield1={selectedfield1}\r\n                          handleSelect8={handleSelect8}\r\n                          handleAddFormSubmit1={handleAddFormSubmit1}\r\n                          handleEditFormSubmit1={handleAddFormSubmit1}\r\n                          contact1={contact1}\r\n                          editContactId1={editContactId1}\r\n                          setEditContactId1={setEditContactId1}\r\n                        // selectedfield61={selectedfield61} \r\n                        // handleSelect61={handleSelect61}\r\n                        />\r\n                      ) : (\r\n                        <ReadOnlyRow1\r\n                          contact1={contact1}\r\n                          handleEditClick1={handleEditClick1}\r\n                          handleDeleteClick1={handleDeleteClick1}\r\n                          num={num}\r\n                          selectedfield={selectedfield}\r\n                          selectedfield1={selectedfield1}\r\n                          selectedrelation={selectedrelation}\r\n                          handleSelect6={handleSelect6}\r\n                          handleSelect7={handleSelect7}\r\n                          compaines={companies}\r\n                        />\r\n                      )}\r\n                    </Fragment>\r\n                  ))}\r\n                  {/* {contactss.map((contact) => (\r\n               <tr>\r\n               <td>{contact.field1}</td>\r\n               <td>{contact.relation1}</td>\r\n               <td>{num}</td>\r\n               <td>{contact.field2}</td>\r\n               <td>\r\n                 <button\r\n                    type=\"button\"\r\n                    onClick={(event) => handleEditClick(event)}\r\n                 >\r\n                Edit\r\n            </button>\r\n            <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n            </td>\r\n          </tr>\r\n          ))} */}\r\n\r\n                </tbody>\r\n              </table>\r\n            </form>\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"footer9\">\r\n              <button className=\"btn btnGreen\" onClick={(event) => close1(event)}\r\n                id=\"okBtn\"\r\n              >\r\n                Save and close\r\n              </button>\r\n\r\n            </div>\r\n          </div>)}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Modal9;\r\n","import React from \"react\";\r\n//import React, { useState} from 'react';\r\nimport \"./modal10.css\";\r\n\r\n// function Modal({ props }) {\r\nfunction Modal10({ setOpenModal10 }) {\r\n  return (\r\n    <div className=\"modalBackground\">\r\n      <div className=\"modalContainer10\" style={{position:\"absolute\",zIndex:\"-1\"}}>\r\n        <div className=\"titleCloseBtn\">\r\n          <button\r\n            onClick={() => {\r\n              setOpenModal10(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"body10\">\r\n      \r\n          <p> \" Data is not valid for the fixed increments \"</p>\r\n          \r\n          \r\n          \r\n        </div>\r\n        \r\n        <div className=\"footer10\">\r\n          <button\r\n            onClick={() => {\r\n              setOpenModal10(false);\r\n            }}\r\n            id=\"okBtn\"\r\n          >\r\n            Close\r\n          </button>\r\n         \r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Modal10;\r\n","import React, {useState} from \"react\";\r\n//import React, { useState} from 'react';\r\nimport \"./barchart.css\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    Label,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n  } from \"recharts\";\r\n// import { PromiseProvider } from \"mongoose\";\r\n\r\n  \r\n  const data = [\r\n    {\r\n      name: \"Page A\",\r\n      uv: 4000,\r\n      pv: 2400,\r\n      amt: 2400\r\n    },\r\n    {\r\n      name: \"Page B\",\r\n      uv: 3000,\r\n      pv: 1398,\r\n      amt: 2210\r\n    },\r\n    {\r\n      name: \"Page C\",\r\n      uv: 2000,\r\n      pv: 9800,\r\n      amt: 2290\r\n    },\r\n    {\r\n      name: \"Page D\",\r\n      uv: 2780,\r\n      pv: 3908,\r\n      amt: 2000\r\n    },\r\n    {\r\n      name: \"Page E\",\r\n      uv: 1890,\r\n      pv: 4800,\r\n      amt: 2181\r\n    },\r\n    {\r\n      name: \"Page F\",\r\n      uv: 2390,\r\n      pv: 3800,\r\n      amt: 2500\r\n    },\r\n    {\r\n      name: \"Page G\",\r\n      uv: 3490,\r\n      pv: 4300,\r\n      amt: 2100\r\n    }\r\n  ];\r\n\r\nfunction Barchart(props) {\r\n// function Barchart({setOpenModal3, selected}) {\r\n  // const [response, setResponse] = useState([]);\r\n  return (\r\n    \r\n    <div className=\"modalBackground\">\r\n     \r\n      <div className=\"modalContainer\">\r\n        <div className=\"titleCloseBtn\">\r\n          <button\r\n            onClick={() => {\r\n              \r\n              props.setOpenModal3(false);\r\n              \r\n              // setOpenModal3(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n        </div>\r\n        <label className=\"title_of_column\"><h3><b>{props.selected}</b></h3></label>\r\n        \r\n        <div className=\"body\">\r\n        \r\n         {/* <label>{selected}</label> */}\r\n        <BarChart\r\n      width={800}\r\n      height={300}\r\n      data={props.response}\r\n      margin={{\r\n        top: 5,\r\n        right: 30,\r\n        left: 20,\r\n        bottom: 5\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"range\">\r\n      {/* <Label\r\n         style={{\r\n             textAnchor: \"middle\",\r\n             fontSize: \"110%\",\r\n             fill: \"blue\",\r\n             position:\"absolute\",\r\n             top:\"100px\",\r\n             marginTop:\"400px\"\r\n         }}\r\n      angle={360} \r\n      value={\"Range\"} />\r\n       */}\r\n      </XAxis>\r\n      <YAxis>\r\n      <Label\r\n         style={{\r\n             textAnchor: \"middle\",\r\n             fontSize: \"110%\",\r\n             fill: \"blue\",\r\n             position:\"absolute\",\r\n             left:\"100px\",\r\n\r\n             marginTop:\"400px\"\r\n         }}\r\n      angle={270} \r\n      value={\"Frequency_percentage\"} />\r\n      </YAxis>\r\n      <Tooltip />\r\n      <Legend />\r\n      <Bar dataKey=\"Original_data\" fill=\"#8884d8\" />\r\n      <Bar dataKey=\"Synthetic_data\" fill=\"#82ca9d\" />\r\n    </BarChart>\r\n          \r\n          \r\n          \r\n        </div>\r\n        \r\n        <div className=\"footer\">\r\n          <button className=\"btn btnGreen\"\r\n            onClick={() => {\r\n              props.setOpenModal3(false);\r\n              // setOpenModal3(false);\r\n            }}\r\n            id=\"okBtn\"\r\n          >\r\n            Close\r\n          </button>\r\n         \r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Barchart;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./App.css\";\r\nimport ErrorModal from \"./components/ErrorModal/ErrorModal\";\r\nimport ailogo from \"./images/ai.png\";\r\n//import synDataGenerator from \"./images/Synthetic Data Generator.png\";\r\nimport synDataGenerator from \"./images/Syntheticdataimage2.png\";\r\n// import Form from 'react-bootstrap/Form';\r\n// import Button from 'react-bootstrap/Button';\r\nimport {\r\n  Button,\r\n  Form,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n//import data from \"./mock-data.json\";\r\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\r\nimport EditableRow from \"./components/EditableRow\";\r\nimport Navbar from \"./components/navbar/Navbar\";\r\nimport Modal from \"./components/modal/Modal\";\r\nimport Modal1 from \"./components/modal1/Modal1\";\r\nimport Modal2 from \"./components/modal2/Modal2\";\r\nimport Modal4 from \"./components/modal4/Modal4\";\r\nimport Modal5 from \"./components/modal5/Modal5\";\r\nimport Modal6 from \"./components/modal6/Modal6\";\r\nimport Modal7 from \"./components/modal7/Modal7\";\r\nimport Modal8 from \"./components/modal8/Modal8\";\r\nimport Modal9 from \"./components/modal9/Modal9\";\r\nimport Modal10 from \"./components/modal10/Modal10\";\r\nimport Barchart from \"./components/charts/Barchart\";\r\n// import { saveAs } from \"file-saver\";\r\nrequire(\"dotenv\").config();\r\n\r\n// let a,b,c,d,e,f = null;\r\nconst App = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false); // State variable for tracking upload progress\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    btnClass === true\r\n      ? setBtnColor(\"#0091ea\")\r\n      : setBtnColor(\"rgb(131, 204, 247)\");\r\n    btnClass1 === true\r\n      ? setBtnColor1(\"#0091ea\")\r\n      : setBtnColor1(\"rgb(131, 204, 247)\");\r\n    // Update the document title using the browser API\r\n    // if(selectedfield===\"Credit_limit\" && selectedrelation===\"<\")\r\n    // setModalOpen10(true)\r\n  });\r\n\r\n  const [show, setShow] = useState(false);\r\n  //const data =[{\"id\":1,\"feildName\":\"call_type\"},{\"id\":2,\"feildName\":\"Credit\"},{\"id\":3,\"feildName\":\"c\"},{\"id\":4,\"feildName\":\"d\"},{\"id\":5,\"feildName\":\"e\"},{\"id\":6,\"feildName\":\"f\"},{\"id\":7,\"feildName\":\"g\"},{\"id\":8,\"feildName\":\"h\"}]\r\n  const [contacts, setContacts] = useState(null);\r\n  const [metadata, setMetadata] = useState(null);\r\n  const [contactss, setContactss] = useState([\r\n    // {\r\n    //   \"id\":1,\r\n    //   \"field1\":\"Credit_limit\",\r\n    //   \"relation1\":\">\",\r\n    //   \"number1\":\"0.9\",\r\n    //   \"field2\":\"Cash_limit\"\r\n    // }\r\n  ]);\r\n  const [response, setResponse] = useState([]);\r\n  const [contacts1, setContacts1] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [message1, setMessage1] = useState(\"\");\r\n  const [disable, setDisable] = useState(false);\r\n  const [disable1, setDisable1] = useState(true);\r\n  const [btnClass, setBtnClass] = useState(false);\r\n  const [btnClass1, setBtnClass1] = useState(false);\r\n  const [btnColor, setBtnColor] = useState(\"rgb(131, 204, 247)\");\r\n  const [btnColor1, setBtnColor1] = useState(\"rgb(131, 204, 247)\");\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalOpen1, setModalOpen1] = useState(false);\r\n  const [modalOpen2, setModalOpen2] = useState(false);\r\n  const [modalOpen3, setModalOpen3] = useState(false);\r\n  const [modalOpen4, setModalOpen4] = useState(false);\r\n  const [modalOpen5, setModalOpen5] = useState(false);\r\n  const [modalOpen6, setModalOpen6] = useState(false);\r\n  const [modalOpen7, setModalOpen7] = useState(false);\r\n  const [modalOpen8, setModalOpen8] = useState(false);\r\n  const [modalOpen9, setModalOpen9] = useState(false);\r\n  const [modalOpen10, setModalOpen10] = useState(false);\r\n  const [selected, setSelected] = useState(\"Credit_limit\");\r\n  const [rows, setRows] = useState(null);\r\n  const [selected1, setSelected1] = useState(null);\r\n  const [selected2, setSelected2] = useState();\r\n  const [message2, setMessage2] = useState();\r\n  const [selectedfield, setselectedField] = useState(\"Cash_limit\");\r\n  const [selectedrelation, setselectedRelation] = useState();\r\n  const [selectedfield1, setselectedField1] = useState();\r\n  const [isShown, setIsShown] = useState(false);\r\n  const [errorModalVisible, setErrorModalVisible] = useState(false);\r\n  let [num, setNum] = useState(100);\r\n  let [condition, setCondition] = useState(false);\r\n  // const [selectedfield61, setSelectedField61] = useState();\r\n  // const [selectedfield62, setSelectedField62] = useState();\r\n  useEffect(() => {\r\n    //fetchData()\r\n  }, []);\r\n  const [addFormData, setAddFormData] = useState({\r\n    feild: \"\",\r\n    lower_limit: \"\",\r\n    upper_limit: \"\",\r\n    data_type: \"\",\r\n  });\r\n\r\n  const [addFormData1, setAddFormData1] = useState({\r\n    field1: \"\",\r\n    relation1: \"\",\r\n    number1: \"\",\r\n    field2: \"\",\r\n  });\r\n\r\n  const [editFormData, setEditFormData] = useState({\r\n    field: \"\",\r\n    primary_key: \"\",\r\n    lower_limit: \"\",\r\n    upper_limit: \"\",\r\n    data_type: \"\",\r\n    categories: \"\",\r\n  });\r\n\r\n  const [editFormData1, setEditFormData1] = useState({\r\n    field1: \"\",\r\n    relation1: \"\",\r\n    number1: \"\",\r\n    feild2: \"\",\r\n  });\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const generateData = (event) => {};\r\n  const hello = (event) => {\r\n    console.log(\"helloji\");\r\n  };\r\n  const handleClick = (newValue) => {\r\n    setSelected1(newValue);\r\n  };\r\n  const handleClick1 = (newValue1) => {\r\n    setSelected2(newValue1);\r\n  };\r\n  const handleSelect6 = (newValue2) => {\r\n    //event.preventDefault();\r\n    setselectedField(newValue2);\r\n\r\n    const fieldName1 = \"field1\";\r\n    const fieldValue1 = newValue2;\r\n\r\n    const newFormData1 = { ...addFormData1 };\r\n    newFormData1[fieldName1] = fieldValue1;\r\n\r\n    setAddFormData1(newFormData1);\r\n  };\r\n  // const handleSelect61 = (newValue11) => {\r\n  //   //console.log(event.target.value);\r\n  //   setSelectedField61(newValue11);\r\n  //   const fieldName1 =\"field1\";\r\n  //   const fieldValue1 =newValue11;\r\n\r\n  //     const newFormData1 = { ...editFormData1 };\r\n  //     newFormData1[fieldName1] = fieldValue1;\r\n\r\n  //     setEditFormData1(newFormData1);\r\n  //   };\r\n  const handleSelect7 = (newValue3) => {\r\n    setselectedRelation(newValue3);\r\n    //event.preventDefault();\r\n\r\n    const fieldName1 = \"relation1\";\r\n    const fieldValue1 = newValue3;\r\n\r\n    const newFormData1 = { ...addFormData1 };\r\n    newFormData1[fieldName1] = fieldValue1;\r\n\r\n    setAddFormData1(newFormData1);\r\n  };\r\n  const handleSelect8 = (newValue4) => {\r\n    setselectedField1(newValue4);\r\n    //event.preventDefault();\r\n\r\n    const fieldName1 = \"field2\";\r\n    const fieldValue1 = newValue4;\r\n\r\n    const newFormData1 = { ...addFormData1 };\r\n    newFormData1[fieldName1] = fieldValue1;\r\n\r\n    setAddFormData1(newFormData1);\r\n  };\r\n  const handleChange6 = (newValue5) => {\r\n    //event.preventDefault();\r\n    setNum(newValue5);\r\n\r\n    const fieldName1 = \"number1\";\r\n    const fieldValue1 = newValue5;\r\n\r\n    const newFormData1 = { ...addFormData1 };\r\n    newFormData1[fieldName1] = fieldValue1;\r\n    console.log(newFormData1);\r\n    setAddFormData1(newFormData1);\r\n  };\r\n  // let incNum =(newValue6)=>{\r\n  //   if(num<100)\r\n  //   {\r\n  //   setNum(newValue6);\r\n  //   }\r\n  // };\r\n  // let decNum = (newValue6) => {\r\n  //    if(num>0)\r\n  //    {\r\n  //     setNum(newValue6);\r\n  //    }\r\n  // }\r\n\r\n  // const handleSelect = async (event) => {\r\n  //   console.log(event.target.value);\r\n  //   setSelected(event.target.value);\r\n  //   setModalOpen3(true);\r\n  //   const USER_DATA = {\r\n  //     column_tovisualize: selected,\r\n  //   };\r\n  //   try {\r\n  //     const response = await fetch(process.env.REACT_APP_API_Visualizer, {\r\n  //       method: \"POST\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //         // \"Content-Type\": \"multipart/form-data\"\r\n  //       },\r\n  //       // body: formData\r\n  //       body: JSON.stringify(USER_DATA),\r\n  //     });\r\n  //     const jsonResponse1 = await response.json();\r\n  //     console.log(jsonResponse1);\r\n  //     setResponse(jsonResponse1);\r\n  //     console.log(response);\r\n  //   } catch (error) {\r\n  //     return error.message;\r\n  //   }\r\n  // };\r\n\r\n  const handleChange1 = (event) => {\r\n    setMessage(event.target.value);\r\n    event.preventDefault();\r\n    console.log(message);\r\n\r\n    console.log(\"value is:\", event.target.value);\r\n  };\r\n  // let var1=message\r\n  // console.log(var1)\r\n  const handleChange2 = (event) => {\r\n    setMessage1(event.target.value);\r\n\r\n    console.log(\"value is:\", event.target.value);\r\n  };\r\n\r\n  // Fetch data from the api.\r\n\r\n  const fetchData = async () => {\r\n    //setIsShown(current => !current);\r\n    setLoading(true);\r\n    setIsUploading(true); // Set isUploading to true when starting the upload\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_API_File, {\r\n        method: \"POST\",\r\n        headers: {\r\n          //\"Content-Type\" : \"application/json\"\r\n        },\r\n        body: formData,\r\n      });\r\n      const jsonResponse = await response.json();\r\n      //setOptionsSelected();\r\n      if (response.status === 200) {\r\n        console.log(\"jsonResponse\", jsonResponse);\r\n        setMetadata(jsonResponse);\r\n        setIsShown(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      return error.message;\r\n    } finally {\r\n      setLoading(false);\r\n      setIsShown(true);\r\n    }\r\n    // setIsShown(current => !current);\r\n    setIsUploading(false);\r\n  };\r\n\r\n  // b = contacts[2][\"lower_limit\"]\r\n  // c = contacts[2][\"upper_limit\"]\r\n  // d = contacts[2][\"lower_limit\"]\r\n  const fetchData1 = async (contact) => {\r\n    setDisable(true);\r\n    setDisable1({\r\n      backgroundColor: \"#0091ea\",\r\n      border: \"red\",\r\n    });\r\n    // if (message > 100 | message < 0)\r\n    //   alert(\"The number of samples should be in range of 0 to 100\")\r\n    console.log(\"Hello\");\r\n    contacts[\"No_of_samples\"] = parseInt(message);\r\n    console.log(contacts);\r\n\r\n    const formData = new FormData();\r\n    try {\r\n      console.log(\"hello\");\r\n      formData.append(\"contact\", contacts);\r\n      //formData.append({\"no of samples\":message})\r\n      console.log(formData);\r\n      const response = await fetch(process.env.REACT_APP_API_File, {\r\n        method: \"POST\",\r\n        headers: {\r\n          //\"Content-Type\" : \"application/json\"\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const jsonResponse = await response.json();\r\n      console.log(\"jsonResponse : \", jsonResponse);\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"jsonResponse if status 200\", jsonResponse);\r\n        //setContacts(jsonResponse)\r\n      }\r\n    } catch (error) {\r\n      return error.message;\r\n    }\r\n  };\r\n\r\n  // Download data from the api.\r\n  let a;\r\n  const downloadDataAdd = async (event) => {\r\n    setModalOpen9(true);\r\n    console.log(condition);\r\n    setCondition(true);\r\n    console.log(condition);\r\n    //btnClass ? setBtnClass(false) : setBtnClass(true);\r\n    //console.log(btnClass)\r\n    //btnClass === true ? setBtnColor(\"#0091ea\") : setBtnColor(\"rgb(131, 204, 247)\");\r\n    //setBtnColor(\"#0091ea\")\r\n  };\r\n  const downloadData1 = async (event) => {\r\n    console.log(\"Inside download data 1\");\r\n    setModalOpen2(true);\r\n\r\n    // Check if contacts array is empty before accessing its elements\r\n    // if (contacts.length === 0) {\r\n    //   console.log(\"Contacts array is empty\");\r\n    //   return; // Exit the function early\r\n    // }\r\n\r\n    // const USER_DATA = {\r\n    //   \"credit_limit\": {\r\n    //     \"upper_limit\": parseInt(contacts[1][\"upper_limit\"]),\r\n    //     \"lower_limit\": parseInt(contacts[1][\"lower_limit\"])\r\n    //   },\r\n    //   \"equifax_score\": {\r\n    //     \"upper_limit\": parseInt(contacts[3][\"upper_limit\"]),\r\n    //     \"lower_limit\": parseInt(contacts[3][\"lower_limit\"])\r\n    //   },\r\n    //   \"cash_limit\": {\r\n    //     \"upper_limit\": parseInt(contacts[4][\"upper_limit\"]),\r\n    //     \"lower_limit\": parseInt(contacts[4][\"lower_limit\"])\r\n    //   },\r\n    //   samples: parseInt(message),\r\n    //   \"primary_k\": selected1,\r\n    //   \"cat_types\": [\"B\", \"P\"]\r\n    // };\r\n\r\n    const USER_DATA = {\r\n      samples: parseInt(message),\r\n      // \"primary_k\": selected1,\r\n    };\r\n    // console.log(\"contacts data\", contacts);\r\n    console.log(\"user data\", USER_DATA);\r\n    // return false\r\n\r\n    try {\r\n      const response = await fetch(process.env.REACT_APP_API_Row, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(USER_DATA),\r\n      });\r\n\r\n      const blob = await response.json();\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"Blob content is : \", blob);\r\n\r\n        setRows(blob);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  //   const element = document.createElement('a');\r\n  //   const file = new Blob([blob], { type: 'text/plain' });\r\n  //   element.href = URL.createObjectURL(file);\r\n  //   element.download = 'some.xlsx';\r\n  //   element.click();\r\n\r\n  const [editContactId, setEditContactId] = useState(null);\r\n  // function handleChange(event) {\r\n  //   setFile(event.target.files[0]);\r\n  // }\r\n  function handleChange(event) {\r\n    const selectedFile = event.target.files[0];\r\n\r\n    // Check if a file was selected\r\n    if (selectedFile) {\r\n      // Check the file type\r\n      if (\r\n        selectedFile.type === \"application/vnd.ms-excel\" ||\r\n        selectedFile.name.endsWith(\".xls\")\r\n      ) {\r\n        // File is a valid .xls file, proceed with setting the file state\r\n        setFile(selectedFile);\r\n      } else {\r\n        // File is not a valid .xls file, display an error message\r\n        setErrorModalVisible(true);\r\n      }\r\n    } else {\r\n      // No file was selected, reset the file state\r\n      setFile(null);\r\n    }\r\n  }\r\n  const [editContactId1, setEditContactId1] = useState(null);\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...addFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setAddFormData(newFormData);\r\n  };\r\n\r\n  // const handleAddFormChange1 = (event) => {\r\n  //   event.preventDefault();\r\n\r\n  //   const fieldName = event.target.getAttribute(\"name\");\r\n  //   const fieldValue = event.target.value;\r\n\r\n  //   const newFormData = { ...addFormData };\r\n  //   newFormData[fieldName] = fieldValue;\r\n\r\n  //   setAddFormData(newFormData);\r\n  // };\r\n\r\n  const handleEditFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...editFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setEditFormData(newFormData);\r\n  };\r\n  const handleEditFormChange1 = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...editFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setEditFormData(newFormData);\r\n  };\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact = {\r\n      id: nanoid(),\r\n      field: addFormData.field,\r\n      lower_limit: addFormData.lower_limit,\r\n      upper_limit: addFormData.upper_limit,\r\n      data_type: addFormData.data_type,\r\n    };\r\n\r\n    const newContacts = [...contacts, newContact];\r\n    setContacts(newContacts);\r\n  };\r\n  const handleAddFormSubmit1 = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact1 = {\r\n      id: nanoid(),\r\n      field1: addFormData1.field1,\r\n      relation1: addFormData1.relation1,\r\n      number1: addFormData1.number1,\r\n      field2: addFormData1.field2,\r\n    };\r\n    console.log(newContact1);\r\n    const newContacts1 = [...contactss, newContact1];\r\n    setContactss(newContacts1);\r\n  };\r\n\r\n  const handleEditFormSubmit = (event, contact) => {\r\n    event.preventDefault();\r\n    //setEditContactId(contact.id);\r\n    const formValues = {\r\n      field: contact.field,\r\n      lower_limit: contact.lower_limit,\r\n      upper_limit: contact.upper_limit,\r\n      data_type: contact.data_type,\r\n      categories: contact.categories,\r\n    };\r\n\r\n    const editedContact = {\r\n      id: editContactId,\r\n      field: editFormData.field,\r\n      lower_limit: editFormData.lower_limit,\r\n      upper_limit: editFormData.upper_limit,\r\n      data_type: editFormData.data_type,\r\n      categories: editFormData.categories,\r\n    };\r\n    console.log(editedContact.lower_limit);\r\n    console.log(formValues.lower_limit);\r\n    console.log(editedContact.upper_limit);\r\n    console.log(formValues.upper_limit);\r\n\r\n    //console.log(contact.id)\r\n    // if(editedContact.lower_limit < contacts.lower_limit)\r\n    // console.log(\"hello\")\r\n\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n    newContacts[index] = editedContact;\r\n    // {editedContact.lower_limit > formValues.lower_limit && (\r\n    //   <span className=\"invalid-feedback\">\"The required value sholud be in range\" </span>\r\n    //   )}\r\n    if (\r\n      (editedContact.lower_limit < formValues.lower_limit) |\r\n      (editedContact.upper_limit > formValues.upper_limit)\r\n    )\r\n      alert(\"Please select a value in between the range\");\r\n    else {\r\n      setContacts(newContacts);\r\n      setEditContactId(null);\r\n    }\r\n    //console.log(contacts)\r\n  };\r\n\r\n  const handleEdit1Click = (event, contact) => {\r\n    event.preventDefault();\r\n    setEditContactId(contact.id);\r\n\r\n    const formValues = {\r\n      field: contact.field,\r\n      categories: contact.categories,\r\n      //upper_limit: contact.upper_limit,\r\n      data_type: contact.data_type,\r\n    };\r\n\r\n    setEditFormData(formValues);\r\n  };\r\n  const handleEditClick = (event, contact) => {\r\n    event.preventDefault();\r\n    setEditContactId(contact.id);\r\n\r\n    const formValues = {\r\n      field: contact.field,\r\n      primary_key: selected1,\r\n      lower_limit: contact.lower_limit,\r\n      upper_limit: contact.upper_limit,\r\n      data_type: contact.data_type,\r\n      categories: contact.categories,\r\n    };\r\n\r\n    setEditFormData(formValues);\r\n  };\r\n  const handleValidation = (event, contact) => {\r\n    event.preventDefault();\r\n\r\n    const formValues = {\r\n      id: editContactId,\r\n      field: contact.field,\r\n      lower_limit: contact.lower_limit,\r\n      upper_limit: contact.upper_limit,\r\n      data_type: contact.data_type,\r\n      categories: contact.categories,\r\n    };\r\n    if (event.target.value > formValues.lower_limit)\r\n      console.log(\"the value should be in range\");\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleDeleteClick = (contactId) => {\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === contactId);\r\n\r\n    newContacts.splice(index, 1);\r\n\r\n    setContacts(newContacts);\r\n  };\r\n  //contacts1[\"credit_limit\"][\"upper_limit\"] =0;\r\n  // contacts1[\"samples\"]= parseInt(message)\r\n  // contacts1[\"primary_k\"]=\"Cedit_limit\"\r\n  // console.log(contacts1)\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* <Modal2 message={message}/> */}\r\n      {/* <Modal2 downloadData={message}/> */}\r\n      {errorModalVisible && (\r\n        <ErrorModal\r\n          message=\"Please select a valid .xls file.\"\r\n          onClose={() => setErrorModalVisible(false)}\r\n        />\r\n      )}\r\n      {modalOpen && <Modal setOpenModal={setModalOpen} />}\r\n      {modalOpen10 && <Modal10 setOpenModal10={setModalOpen10} />}\r\n      {modalOpen1 && (\r\n        <Modal1\r\n          setOpenModal1={setModalOpen1}\r\n          btnClass1={btnClass1}\r\n          setBtnClass1={setBtnClass1}\r\n        />\r\n      )}\r\n      {modalOpen4 && (\r\n        <Modal4\r\n          setOpenModal4={setModalOpen4}\r\n          message2={message2}\r\n          setModalOpen5={setModalOpen5}\r\n        />\r\n      )}\r\n      {modalOpen5 && (\r\n        <Modal5\r\n          setOpenModal5={setModalOpen5}\r\n          btnColor1={btnColor1}\r\n          btnClass1={btnClass1}\r\n          setBtnClass1={setBtnClass1}\r\n          setModalOpen1={setModalOpen1}\r\n        />\r\n      )}\r\n      {modalOpen6 && (\r\n        <Modal6\r\n          setOpenModal6={setModalOpen6}\r\n          handleSelect6={handleSelect6}\r\n          selectedfield={selectedfield}\r\n          handleSelect7={handleSelect7}\r\n          selectedrelation={selectedrelation}\r\n          handleSelect8={handleSelect8}\r\n          selectedfield1={selectedfield1}\r\n          num={num}\r\n          setNum={setNum}\r\n        />\r\n      )}\r\n      {modalOpen9 && (\r\n        <Modal9\r\n          setOpenModal9={setModalOpen9}\r\n          handleSelect6={handleSelect6}\r\n          selectedfield={selectedfield}\r\n          handleSelect7={handleSelect7}\r\n          selectedrelation={selectedrelation}\r\n          handleSelect8={handleSelect8}\r\n          selectedfield1={selectedfield1}\r\n          num={num}\r\n          setNum={setNum}\r\n          handleChange6={handleChange6}\r\n          contactss={contactss}\r\n          setContactss={setContactss}\r\n          addFormData1={addFormData1}\r\n          setAddFormData1={setAddFormData1}\r\n          editFormData1={editFormData1}\r\n          setEditFormData1={setEditFormData1}\r\n          editContactId1={editContactId1}\r\n          setEditContactId1={setEditContactId1}\r\n          handleAddFormSubmit1={handleAddFormSubmit1}\r\n          btnClass={btnClass}\r\n          setBtnClass={setBtnClass}\r\n          setModalOpen10={setModalOpen10}\r\n        />\r\n      )}\r\n      {modalOpen7 && (\r\n        <Modal7\r\n          setOpenModal7={setModalOpen7}\r\n          contacts={contacts}\r\n          setModalOpen8={setModalOpen8}\r\n          setModalOpen5={setModalOpen5}\r\n        />\r\n      )}\r\n      {modalOpen2 && (\r\n        <Modal2\r\n          setOpenModal2={setModalOpen2}\r\n          setOpenModal1={setModalOpen1}\r\n          setOpenModal4={setModalOpen4}\r\n          message={message}\r\n          contacts={contacts}\r\n          rows={rows}\r\n          setModalOpen4={setModalOpen4}\r\n          handleChange1={handleChange1}\r\n          setModalOpen5={setModalOpen5}\r\n          selected1={selected1}\r\n          num={num}\r\n          selectedfield={selectedfield}\r\n          selectedfield1={selectedfield1}\r\n          selectedrelation={selectedrelation}\r\n          condition={condition}\r\n          setCondition={setCondition}\r\n          metaData={metadata}\r\n        />\r\n      )}\r\n      {/* {modalOpen2 && <Modal2 downloadData={message}/>} */}\r\n      {modalOpen8 && <Modal8 setOpenModal8={setModalOpen8} />}\r\n      {modalOpen3 && (\r\n        <Barchart\r\n          setOpenModal3={setModalOpen3}\r\n          selected={selected}\r\n          response={response}\r\n        />\r\n      )}\r\n\r\n      {/* <Modal2 message={message}/> */}\r\n      <div>\r\n        <Navbar />\r\n        <div\r\n          style={{\r\n            marginTop: \"30px\",\r\n            marginLeft: \"500px\",\r\n            fontSize: \"25px\",\r\n            background: \"#ffffff\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n\r\n      <div className=\"image-wrapper\">\r\n        <img src={synDataGenerator} alt=\"synDataGenerator\" className=\"image\" />\r\n        <div className=\"text-overlay\">\r\n          <b>Data Buddy - Synthetic Data Generator</b>\r\n          <p style={{ fontSize: \"20px\", marginTop: \"10px\" }}>\r\n            Designed to be your one-stop shop for creating tabular synthetic\r\n            data\r\n          </p>\r\n        </div>\r\n        {/* <img src={ailogo} alt=\"AI Logo\" className=\"background-image\"/> */}\r\n      </div>\r\n      <div className=\"browse\">\r\n        <b style={{ fontSize: \"20px\" }}> Select source : </b>\r\n        {/* <Form.File className = \"input\" onChange = {handleChange} label =\" Choose File\" custom/> */}\r\n        <Form.Group controlId=\"formFile\" className=\"mb-7\">\r\n          <Form.Control type=\"file\" onChange={handleChange} />\r\n        </Form.Group>\r\n        <div className=\"custom-container\">\r\n          <Button\r\n            className=\"custom-button\"\r\n            variant=\"outline-upload\"\r\n            onClick={() => {\r\n              fetchData();\r\n            }}\r\n          >\r\n            Upload\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {/* {isUploading && (\r\n        <div className=\"loader-container\">\r\n          <Spinner animation=\"border\" variant=\"primary\" role=\"status\" className =\"small-spinner\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n          </Spinner>\r\n          <span className=\"loading-text\">Loading...</span>\r\n        </div>\r\n      )} */}\r\n      <Container>\r\n        <div className=\"d-flex justify-content-center my-5\">\r\n          {loading && (\r\n            <div className=\"loader-overlay\">\r\n              <div className=\"loader-container\">\r\n                <Spinner\r\n                  animation=\"border\"\r\n                  variant=\"light\"\r\n                  role=\"status\"\r\n                  className=\"spinner\"\r\n                >\r\n                  <span className=\"visually-hidden\">Loading...</span>\r\n                </Spinner>\r\n                <span className=\"loading-text\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {isShown && (\r\n          <>\r\n            <Form onSubmit={handleEditFormSubmit}>\r\n              <Table striped bordered hover className=\"text-center\" size=\"sm\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Field Name</th>\r\n                    <th>Data Type</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {metadata ? (\r\n                    Object.keys(metadata.columns).map((key) => (\r\n                      <tr key={key}>\r\n                        <td>{key}</td>\r\n                        <td>{metadata.columns[key].sdtype}</td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td colSpan=\"2\">No data yet!!</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </Table>\r\n            </Form>\r\n\r\n            <div className=\"button-container mt-3\">\r\n              <Form.Group as={Row} className=\"align-items-center\">\r\n                <Form.Label column xs=\"auto\">\r\n                  <b>Number of samples to be generated:</b>\r\n                </Form.Label>\r\n                <Col>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name=\"numberOfSamples\"\r\n                    required\r\n                    placeholder=\"Enter number of samples...\"\r\n                    onChange={handleChange1}\r\n                    value={message}\r\n                  />\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                  <Button\r\n                    className=\"custom-generatedatasetbutton\"\r\n                    variant=\"primary\"\r\n                    onClick={() => {\r\n                      downloadData1();\r\n                    }}\r\n                  >\r\n                    Generate dataset\r\n                  </Button>\r\n                </Col>\r\n              </Form.Group>\r\n            </div>\r\n          </>\r\n        )}\r\n      </Container>\r\n      <footer className=\"footer\">\r\n        <div className=\"left-footer\">\r\n          <p>Copyrights (C) 2024 Zensar</p>\r\n        </div>\r\n        <div className=\"right-footer\">\r\n          <p>Copyrights (C) 2024 Zensar Technology Solutions</p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.js\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}